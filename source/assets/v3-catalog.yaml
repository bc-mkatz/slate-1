swagger: "2.0"
info:
  title: BigCommerce Catalog API
  version: 3.0.0b
  description: A Swagger Document for the BigCommmerce API V3.
  termsOfService: "http://www.bigcommerce.com/terms"
host: "api.bigcommerce.com"
basePath: "/stores/{{store_id}}/v3"
tags:
  - name: Catalog
    description: BigCommerce Catalog API Definition
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
paths:
  /catalog/products:
    get:
      tags:
        - Catalog
      description: |
        Returns a paginated collection of `Products` objects from the BigCommerce Catalog.
      operationId: getProducts
      parameters:
        - $ref: "#/parameters/FilterIdParam"
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterSkuParam"
        - $ref: "#/parameters/FilterUpcParam"
        - $ref: "#/parameters/FilterPriceParam"
        - $ref: "#/parameters/FilterWeightParam"
        - $ref: "#/parameters/FilterConditionParam"
        - $ref: "#/parameters/FilterBrandIdParam"
        - $ref: "#/parameters/FilterDateModifiedParam"
        - $ref: "#/parameters/FilterDateLastImportedParam"
        - $ref: "#/parameters/FilterIsVisibleParam"
        - $ref: "#/parameters/FilterIsFeaturedParam"
        - $ref: "#/parameters/FilterIsFreeShippingParam"
        - $ref: "#/parameters/FilterInventoryLevelParam"
        - $ref: "#/parameters/FilterInventoryLowParam"
        - $ref: "#/parameters/FilterOutOfStockParam"
        - $ref: "#/parameters/FilterTotalSoldParam"
        - $ref: "#/parameters/ProductFilterTypeParam"
        - $ref: "#/parameters/FilterCategoriesParam"
        - $ref: "#/parameters/ProductFilterKeywordParam"
        - $ref: "#/parameters/ProductFilterKeywordContextParam"
        - $ref: "#/parameters/FilterIncludeParam"
        - $ref: "#/parameters/FilterAvailabilityParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
        - $ref: "#/parameters/DirectionParam"
        - name: sort
          description: |
            Field name to sort by.
            Values: id, name, sku, price, date_modified, date_last_imported, inventory_level, is_visible.
          required: false
          in: query
          type: string
      responses:
        200:
          description: |
            An array of products and metadata.
          schema:
            $ref: "#/definitions/ProductCollectionResponse"
    post:
      tags:
        - Catalog
      description: |
        Creates a `Product` in the BigCommerce Catalog.
      operationId: createProduct
      parameters:
        - name: product
          in: body
          required: true
          description: |
            A BigCommerce `Product` object.
          schema:
            $ref: "#/definitions/ProductPost"
      responses:
        200:
          description: |
            A product
          schema:
            $ref: "#/definitions/ProductResponse"
        422:
          description: |
            `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid category id, brand id, or tax_class id; or a conflicting `bulk_pricing_rule`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes one or more `Product` objects from the BigCommerce Catalog
      operationId: deleteProducts
      parameters:
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterSkuParam"
        - $ref: "#/parameters/FilterPriceParam"
        - $ref: "#/parameters/FilterWeightParam"
        - $ref: "#/parameters/FilterConditionParam"
        - $ref: "#/parameters/FilterBrandIdParam"
        - $ref: "#/parameters/FilterDateModifiedParam"
        - $ref: "#/parameters/FilterDateLastImportedParam"
        - $ref: "#/parameters/FilterIsVisibleParam"
        - $ref: "#/parameters/FilterIsFeaturedParam"
        - $ref: "#/parameters/FilterInventoryLevelParam"
        - $ref: "#/parameters/FilterTotalSoldParam"
        - $ref: "#/parameters/ProductFilterTypeParam"
        - $ref: "#/parameters/FilterCategoriesParam"
        - $ref: "#/parameters/ProductFilterKeywordParam"
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}:
    parameters:
      - $ref: "#/parameters/ProductIdParam"
    get:
      tags:
        - Catalog
      description: |
        Returns a `Product` from the BigCommerce Catalog.
      operationId: getProductById
      parameters:
        - $ref: "#/parameters/FilterIncludeParam"
      responses:
        200:
          description: |
            A product.
          schema:
            $ref: "#/definitions/ProductResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Updates a `Product` in the BigCommerce Catalog.
      operationId: updateProduct
      parameters:
        - name: product
          in: body
          required: true
          description: |
            A BigCommerce `Product` object.
          schema:
            $ref: "#/definitions/ProductPut"
      responses:
        200:
          description: |
            A product.
          schema:
            $ref: "#/definitions/ProductResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk_pricing_rule.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Product` object from the BigCommerce Catalog
      operationId: deleteProductById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/images:
    parameters:
      - name: product_id
        description: |
          The ID of the `Product` to which the image is being attached.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description: |
        Gets all images on a product.
      operationId: getProductImages
      responses:
        200:
          description: |
            List of product images and metadata.
          schema:
            $ref: "#/definitions/ProductImageCollectionResponse"
        204:
          description: |
            There are not any images on this product.
        404:
          description: |
            The product ID does not exist.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      description: |
        Creates an image on a product. Publically accessible URLs and files (form post) are valid parameters.
      operationId: createProductImage
      parameters:
      - name: productImage
        in: body
        required: true
        description: |
          A BigCommerce `ProductImage` object.
        schema:
          $ref: "#/definitions/ProductImagePost"
      responses:
        200:
          description: |
            A product image.
          schema:
            $ref: '#/definitions/ProductImageResponse'
        404:
          description: |
            The product ID does not exist.
          schema:
            $ref: '#/definitions/NotFound'
  /catalog/products/{product_id}/images/{image_id}:
    parameters:
      - name: product_id
        description: |
          The ID of the `Product` to which the image is being attached.
        required: true
        in: path
        type: integer
      - name: image_id
        description: |
          The ID of the `Image` that is being operated on.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description: |
        Gets image on a product.
      operationId: getProductImageById
      responses:
        200:
          description: |
            An array of product images and metadata.
          schema:
            $ref: "#/definitions/ProductImageResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Updates an image on a product. Publicly accessible URLs and files (form post) are valid parameters.
      operationId: updateProductImage
      parameters:
      - name: productImage
        in: body
        required: true
        description: |
          A BigCommerce `ProductImage` object.
        schema:
          $ref: "#/definitions/ProductImagePut"
      responses:
        200:
          description: |
            A product image.
          schema:
            $ref: '#/definitions/ProductImageResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `ProductImage` in the BigCommerce Catalog.
      operationId: deleteProductImage
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/videos:
    parameters:
      - name: product_id
        description: |
          The ID of the `Product` to which the video is being attached.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description: |
        Gets all videos on a product.
      operationId: getProductVideos
      responses:
        200:
          description: |
            List of product videos and metadata.
          schema:
            $ref: "#/definitions/ProductVideoCollectionResponse"
    post:
      tags:
        - Catalog
      description: |
        Creates a video on a product, using a video ID from YouTube.
      operationId: createProductVideo
      parameters:
      - name: productVideo
        in: body
        required: true
        description: |
          A BigCommerce `ProductVideo` object.
        schema:
          $ref: "#/definitions/ProductVideo"
      responses:
        200:
          description: |
            A product video
          schema:
            $ref: '#/definitions/ProductVideoResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
  /catalog/products/{product_id}/videos/{video_id}:
    parameters:
      - name: product_id
        description: |
          The ID of the `Product` to which the video is being attached.
        required: true
        in: path
        type: integer
      - name: video_id
        description: |
          The ID of the `Video` being operated on.
        required: true
        in: path
        type: string
    get:
      tags:
        - Catalog
      description: |
        Gets video on a product.
      operationId: getProductVideoById
      responses:
        200:
          description: |
            An array of product videos and metadata.
          schema:
            $ref: "#/definitions/ProductVideoResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Updates a video on a product.
      operationId: updateProductVideo
      parameters:
      - name: productVideo
        in: body
        required: true
        description: |
          A BigCommerce `ProductVideo` object.
        schema:
          $ref: "#/definitions/ProductVideo"
      responses:
        200:
          description: |
            A product video
          schema:
            $ref: '#/definitions/ProductVideoResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `ProductVideo` in the BigCommerce Catalog.
      operationId: deleteProductVideo
      responses:
        204:
          description: |
            An empty response
  /catalog/products/{product_id}/variants:
    parameters:
      - $ref: "#/parameters/ProductIdParam"
    get:
      tags:
        - Catalog
      description: |
        Returns a `Variant` object list from the BigCommerce Catalog.
      operationId: getVariantsByProductId
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
      responses:
        200:
          description: |
            An array of variants and metadata.
          schema:
            $ref: '#/definitions/VariantCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      description:
        Creates a `Variant` object.
      operationId: createVariant
      parameters:
      - name: Variant
        in: body
        required: true
        description: |
          A `Variant` object.
        schema:
          $ref: "#/definitions/Variant"
      responses:
        200:
          description: |
            A variant and metadata.
          schema:
            $ref: '#/definitions/VariantResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
  /catalog/products/{product_id}/variants/{variant_id}:
    parameters:
      - $ref: '#/parameters/ProductIdParam'
      - $ref: '#/parameters/VariantIdParam'
    get:
      tags:
        - Catalog
      description:
        Gets a `Variant` object.
      operationId: getVariantById
      responses:
        200:
          description: |
            A variant and metadata.
          schema:
            $ref: '#/definitions/VariantResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description:
        Updates a `Variant` object.
      operationId: updateVariant
      parameters:
      - name: Variant
        in: body
        required: true
        description: |
          `Variant` object
        schema:
          $ref: "#/definitions/Variant"
      responses:
        200:
          description: |
            A variant and metadata.
          schema:
            $ref: '#/definitions/VariantResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Variant`.
      operationId: deleteVariantById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/variants/{variant_id}/metafields:
    parameters:
      - $ref: '#/parameters/ProductIdParam'
      - $ref: '#/parameters/VariantIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield` object list, by product_id and variant_id.
      operationId: getVariantMetafieldsByProductIdAndVariantId
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
        - $ref: '#/parameters/MetafieldKeyParam'
        - $ref: '#/parameters/MetafieldNamespaceParam'
      responses:
        200:
          description: |
            An array of metafields and metadata.
          schema:
            $ref: '#/definitions/MetaFieldCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      description:
        Creates a variant `Metafield`.
      operationId: createVariantMetafield
      parameters:
        - name: Metafield
          in: body
          required: true
          description: |
            A `Metafield` object.
          schema:
            $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A `Metafield` object.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        422:
          description: |
            The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique-key combinations of the app's client id, namespace, key, resource_type, and resource_id.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}:
    parameters:
      - $ref: '#/parameters/MetafieldIdParam'
      - $ref: '#/parameters/ProductIdParam'
      - $ref: '#/parameters/VariantIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield`, by product_id and variant_id.
      operationId: getVariantMetafieldByProductIdAndVariantId
      responses:
        200:
          description: |
            A metafield object.
          schema:
            $ref: '#/definitions/Metafield'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description:
        Updates a `Metafield` object.
      operationId: updateVariantMetafield
      parameters:
      - name: Metafield
        in: body
        required: true
        description: |
          A `Metafield` object.
        schema:
          $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A metafield and metadata.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Delete a `Metafield`
      operationId: deleteVariantMetafieldById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/variants/{variant_id}/image:
    post:
      tags:
        - Catalog
      operationId: createVariantImage
      parameters:
        - $ref: "#/parameters/ProductIdParam"
        - name: variant_id
          in: path
          description: |
            The ID of the `Variant`.
          required: true
          type: number
          format: int
        - name: image_file
          description: |
            An image file. Supported MIME types include GIF, JPEG, and PNG.
          required: true
          in: formData
          type: file
      consumes:
        - multipart/form-data
      responses:
        200:
          description: |
            A ResourceImage and metadata.
          schema:
            $ref: '#/definitions/ImageResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            Image was not valid. This is the result of a missing image_file field or an incorrect file type. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/options:
    parameters:
      - $ref: "#/parameters/ProductIdParam"
    get:
      tags:
        - Catalog
      description:
        Gets an array of `Option` objects.
      operationId: getOptions
      responses:
        200:
          description: |
            An array of options and metadata.
          schema:
            $ref: '#/definitions/OptionCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      parameters:
      - name: Option
        in: body
        required: true
        description: |
          An `Option` object.
        schema:
          $ref: "#/definitions/Option"
      description:
        Creates an `Option`.
      operationId: createOption
      responses:
        200:
          description: |
            An option object.
          schema:
            $ref: '#/definitions/OptionResponse'
        422:
          description: |
            Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/options/{option_id}:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `Option` belongs.
        required: true
        type: number
        format: int
      - name: option_id
        description: |
          The ID of the `Option`.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description:
        Gets `Option` object, by product id and option id.
      operationId: getOptionById
      responses:
        200:
          description: |
            An `Option` object.
          schema:
            $ref: "#/definitions/OptionResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Update a Product's `Option`, based on the product_id and option_id.
      operationId: updateOption
      parameters:
        - name: option
          in: body
          required: true
          description: |
            A BigCommerce `Option` object.
          schema:
            $ref: "#/definitions/Option"
      responses:
        200:
          description: |
            An `Option` object.
          schema:
            $ref: '#/definitions/OptionResponse'
        422:
          description: |
            The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Delete a Product's `Option`, based on the product_id and option_id.
      operationId: deleteOptionById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/modifiers:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `Modifier` belongs.
        required: true
        type: number
        format: int
    get:
      tags:
        - Catalog
      description:
        Gets an array of `Modifier` objects.
      operationId: getModifiers
      responses:
        200:
          description: |
            An array of modifiers and metadata.
          schema:
            $ref: '#/definitions/ModifierCollectionResponse'
    post:
      tags:
        - Catalog
      description:
        Creates a `Modifier`.
      operationId: createModifier
      parameters:
        - name: Modifier
          in: body
          required: true
          description: |
            A `Modifier` object.
          schema:
            $ref: "#/definitions/Modifier"
      responses:
        200:
          description: |
            A modifier object.
          schema:
            $ref: '#/definitions/ModifierResponse'
        422:
          description: |
            The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/modifiers/{modifier_id}:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `Modifier` belongs.
        required: true
        type: number
        format: int
      - name: modifier_id
        description: |
          The ID of the `Modifier`.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description: |
        Get a `Modifier` by product_id and modifier_id
      operationId: getModifierById
      responses:
        200:
          description: |
            A `Modifier` object.
          schema:
            $ref: '#/definitions/ModifierResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Update an Product's `Modifier` based on the product_id and modifier_id.
      operationId: updateModifier
      parameters:
        - name: modifier
          in: body
          required: true
          description: |
            A BigCommerce `Modifier` object.
          schema:
            $ref: "#/definitions/Modifier"
      responses:
        200:
          description: |
            A modifier object.
          schema:
            $ref: '#/definitions/ModifierResponse'
        422:
          description: |
            The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Delete a Product's `Modifier` based on the product_id and modifier_id.
      operationId: deleteModifierById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `Modifier` belongs.
        required: true
        type: number
        format: int
      - name: modifier_id
        description: |
          The ID of the `Modifier`.
        required: true
        in: path
        type: integer
      - name: value_id
        description: |
          The ID of the `Modifier`.
        required: true
        in: path
        type: integer
    post:
      tags:
        - Catalog
      description: Adds an image to a modifier value; the image will show on the storefront when the value is selected.
      operationId: createModifierImage
      parameters:
        - name: image_file
          description: |
            An image file. Supported MIME types include GIF, JPEG, and PNG.
          required: true
          in: formData
          type: file
      consumes:
        - multipart/form-data
      responses:
        200:
          description: |
            A ResourceImage and metadata.
          schema:
            $ref: '#/definitions/ImageResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            Modifier image was not valid. This is the result of missing `image_file` fields, orof a non-URL value for the `image_file` field. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: Deletes the image assigned to show when the modifier value is selected.
      operationId: deleteModifierImage
      responses:
        204:
          description: Image cleared for this modifier value.
  /catalog/products/{product_id}/complex-rules:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `ComplexRule` belongs.
        required: true
        type: number
        format: int
    get:
      tags:
        - Catalog
      description:
        Get an array of `ComplexRule` objects.
      operationId: getComplexRules
      responses:
        200:
          description: |
            An array of `ComplexRule` objects and metadata.
          schema:
            $ref: '#/definitions/ComplexRuleCollectionResponse'
    post:
      tags:
        - Catalog
      description:
        Creates a `ComplexRule`.
      operationId: createComplexRule
      parameters:
        - name: ComplexRule
          in: body
          required: true
          description: |
            `ComplexRule` object
          schema:
            $ref: "#/definitions/ComplexRule"
      responses:
        200:
          description: |
            A `ComplexRule` object
          schema:
            $ref: '#/definitions/ComplexRuleResponse'
        422:
          description: |
            The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/complex-rules/{complex_rule_id}:
    parameters:
      - name: product_id
        in: path
        description: |
          The ID of the `Product` to which the `ComplexRule` belongs.
        required: true
        type: number
        format: int
      - name: complex_rule_id
        description: |
          The ID of the `ComplexRule`.
        required: true
        in: path
        type: integer
    get:
      tags:
        - Catalog
      description: |
        Get a `ComplexRule` by product_id
      operationId: getComplexRuleById
      responses:
        200:
          description: |
            A modifier object
          schema:
            $ref: '#/definitions/ComplexRuleResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Update an Product's `ComplexRule`, based on the `product_id` and `complex_rule_id`.
      operationId: updateComplexRule
      responses:
        200:
          description: |
            A `ComplexRule` object
          schema:
            $ref: '#/definitions/ComplexRuleResponse'
        422:
          description: |
            The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a Product's `ComplexRule`, based on the `product_id` and `complex_rule_id`.
      operationId: deleteComplexRuleById
      responses:
        204:
          description: |
            An empty response.
  /catalog/products/{product_id}/metafields:
    parameters:
      - $ref: '#/parameters/ProductIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield` object list, by `product_id`.
      operationId: getProductMetafieldsByProductId
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
        - $ref: '#/parameters/MetafieldKeyParam'
        - $ref: '#/parameters/MetafieldNamespaceParam'
      responses:
        200:
          description: |
            An array of metafields and metadata.
          schema:
            $ref: '#/definitions/MetaFieldCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'

    post:
      tags:
        - Catalog
      description:
        Creates a product `Metafield`.
      operationId: createProductMetafield
      parameters:
        - name: Metafield
          in: body
          required: true
          description: |
            `Metafield` object
          schema:
            $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A `Metafield` object
          schema:
            $ref: '#/definitions/MetafieldResponse'
        422:
          description: |
            The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/products/{product_id}/metafields/{metafield_id}:
    parameters:
      - $ref: '#/parameters/MetafieldIdParam'
      - $ref: '#/parameters/ProductIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield`, by `product_id`.
      operationId: getProductMetafieldByProductId
      responses:
        200:
          description: |
            A metafield object.
          schema:
            $ref: '#/definitions/Metafield'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description:
        Updates a `Metafield` object.
      operationId: updateProductMetafield
      parameters:
      - name: Metafield
        in: body
        required: true
        description: |
          `Metafield` object
        schema:
          $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A metafield and metadata.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Metafield`.
      operationId: deleteProductMetafieldById
      responses:
        204:
          description: |
            An empty response.
  /catalog/categories:
    get:
      tags:
        - Catalog
      description: |
        Returns a paginated categories collection from the BigCommerce Catalog.
      operationId: getCategories
      parameters:
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterParentIdParam"
        - $ref: "#/parameters/FilterPageTitleParam"
        - $ref: "#/parameters/FilterKeywordParam"
        - $ref: "#/parameters/FilterIsVisibleParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
      responses:
        200:
          description: |
            An array of category objects and metadata.
          schema:
            $ref: "#/definitions/CategoryCollectionResponse"
    post:
      tags:
        - Catalog
      description: |
        Creates a `Category` in the BigCommerce Catalog.
      operationId: createCategory
      parameters:
        - name: category
          in: body
          required: true
          description: |
            A BigCommerce `Category` object.
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          description: |
            A category object.
          schema:
            $ref: "#/definitions/CategoryResponse"
        422:
          description: |
            The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a product or products from the BigCommerce Catalog.
      operationId: deleteCategories
      parameters:
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterParentIdParam"
        - $ref: "#/parameters/FilterPageTitleParam"
        - $ref: "#/parameters/FilterKeywordParam"
        - $ref: "#/parameters/FilterIsVisibleParam"
      responses:
        204:
          description: |
            An empty response.
  /catalog/categories/{category_id}:
    parameters:
      - $ref: '#/parameters/CategoryIdParam'
    get:
      tags:
        - Catalog
      description: |
        Returns a `Category` from the BigCommerce Catalog.
      operationId: getCategoryById
      responses:
        200:
          description: |
            A category object.
          schema:
            $ref: "#/definitions/CategoryResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Updates a `Category` in the BigCommerce Catalog.
      operationId: updateCategory
      parameters:
        - name: category
          in: body
          required: true
          description: |
            A BigCommerce `Category` object.
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          description: |
            A category object.
          schema:
            $ref: "#/definitions/CategoryResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes one or more `Category` objects from the BigCommerce catalog.
      operationId: deleteCategoryById
      responses:
        204:
          description: |
            An empty response.
  /catalog/categories/{category_id}/metafields:
    parameters:
      - $ref: '#/parameters/CategoryIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield` object list, by category_id.
      operationId: getCategoryMetafieldsByCategoryId
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
        - $ref: '#/parameters/MetafieldKeyParam'
        - $ref: '#/parameters/MetafieldNamespaceParam'
      responses:
        200:
          description: |
            An array of metafields and metadata.
          schema:
            $ref: '#/definitions/MetaFieldCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      description:
        Creates a product `Metafield`.
      operationId: createCategoryMetafield
      parameters:
        - name: Metafield
          in: body
          required: true
          description: |
            A `Metafield` object.
          schema:
            $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A `Metafield` object.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        422:
          description: |
            The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/categories/{category_id}/metafields/{metafield_id}:
    parameters:
      - $ref: '#/parameters/MetafieldIdParam'
      - $ref: '#/parameters/CategoryIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield` by category_id.
      operationId: getCategoryMetafieldByCategoryId
      responses:
        200:
          description: |
            A metafield object,
          schema:
            $ref: '#/definitions/Metafield'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description:
        Updates a `Metafield` object.
      operationId: updateCategoryMetafield
      parameters:
      - name: Metafield
        in: body
        required: true
        description: |
          A `Metafield` object.
        schema:
          $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A metafield and metadata.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Delete a `Metafield`
      operationId: deleteCategoryMetafieldById
      responses:
        204:
          description: |
            An empty response.
  /catalog/categories/{category_id}/image:
    parameters:
      - $ref: '#/parameters/CategoryIdParam'
    post:
      tags:
        - Catalog
      parameters:
        - name: image_file
          description: |
            An image file. Supported MIME types include GIF, JPEG, and PNG.
          required: true
          in: formData
          type: file
      consumes:
        - multipart/form-data
      description: |
        Creates an image on a category. Publicly accessible URLs and files (form post) are valid parameters.
      operationId: createCategoryImage
      responses:
        200:
          description: |
            A ResourceImage and metadata.
          schema:
            $ref: '#/definitions/ImageResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Category` image from the BigCommerce Catalog.
      operationId: deleteCategoryImage
      responses:
        204:
          description: |
            An empty response.
  /catalog/categories/tree:
    get:
      tags:
        - Catalog
      description: |
        Returns the categories tree, a nested lineage of the categories with parent->child relationship. The `Category` objects returned are simplified versions of the category objects returned in the rest of this API.
      operationId: getCategoryTree
      responses:
        200:
          description: |
            A array of nested category tree objects and metadata.
          schema:
            $ref: "#/definitions/CategoryTreeCollectionResponse"
  /catalog/brands:
    get:
      tags:
        - Catalog
      description:  |
        Gets `Brand` objects.
      operationId: getBrands
      parameters:
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterPageTitleParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
      responses:
        200:
          description: |
            An array of brand objects and metadata.
          schema:
            $ref: "#/definitions/BrandCollectionResponse"
    post:
      tags:
        - Catalog
      description:
        Creates a `Brand` object.
      operationId: createBrand
      parameters:
      - name: Brand
        in: body
        required: true
        description: |
          A `Brand` object.
        schema:
          $ref: "#/definitions/Brand"
      responses:
        200:
          description: |
            A brand object
          schema:
            $ref: "#/definitions/BrandResponse"
        422:
          description: |
            Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            Brand was in conflict with another brand. This is the result of duplicate unique fields such as name.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes one or more `Brand` objects from the BigCommerce Catalog.
      operationId: deleteBrands
      parameters:
        - $ref: "#/parameters/FilterNameParam"
        - $ref: "#/parameters/FilterPageTitleParam"
      responses:
        204:
          description: |
            An empty response.
  /catalog/brands/{brand_id}:
    parameters:
      - name: brand_id
        in: path
        description: |
          The ID of the `Brand` requested.
        required: true
        type: number
        format: int
    get:
      tags:
        - Catalog
      description:
        Gets a `Brand` object.
      operationId: getBrandById
      responses:
        200:
          description: |
            A `Brand` object.
          schema:
            $ref: "#/definitions/BrandResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description: |
        Updates a `Brand` in the BigCommerce Catalog.
      operationId: updateBrand
      parameters:
        - name: brand
          in: body
          required: true
          description: |
            Returns a `Brand` from the BigCommerce Catalog.
          schema:
            $ref: "#/definitions/Brand"
      responses:
        200:
          description: |
            A `Brand` object.
          schema:
            $ref: "#/definitions/BrandResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Brand` from the BigCommerce Catalog.
      operationId: deleteBrandById
      responses:
        204:
          description: |
            An empty response.
  /catalog/brands/{brand_id}/metafields:
    parameters:
      - $ref: '#/parameters/BrandIdParam'
      - $ref: '#/parameters/MetafieldKeyParam'
      - $ref: '#/parameters/MetafieldNamespaceParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield` object list, by `category_id`.
      operationId: getBrandMetafieldsByBrandId
      parameters:
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
        - $ref: '#/parameters/MetafieldKeyParam'
        - $ref: '#/parameters/MetafieldNamespaceParam'
      responses:
        200:
          description: |
            An array of metafields and metadata.
          schema:
            $ref: '#/definitions/MetaFieldCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    post:
      tags:
        - Catalog
      description:
        Creates a product `Metafield`.
      operationId: createBrandMetafield
      parameters:
        - name: Metafield
          in: body
          required: true
          description: |
            A `Metafield` object.
          schema:
            $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A `Metafield` object.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        422:
          description: |
            The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the app's client id, namespace, key, resource_type, and resource_id.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalog/brands/{brand_id}/metafields/{metafield_id}:
    parameters:
      - $ref: '#/parameters/MetafieldIdParam'
      - $ref: '#/parameters/BrandIdParam'
    get:
      tags:
        - Catalog
      description: |
        Gets a `Metafield`, by `category_id`.
      operationId: getBrandMetafieldByBrandId
      responses:
        200:
          description: |
            A `Metafield` object.
          schema:
            $ref: '#/definitions/Metafield'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Catalog
      description:
        Updates a `Metafield` object.
      operationId: updateBrandMetafield
      parameters:
      - name: Metafield
        in: body
        required: true
        description: |
          A `Metafield` object.
        schema:
          $ref: "#/definitions/Metafield"
      responses:
        200:
          description: |
            A metafield and metadata.
          schema:
            $ref: '#/definitions/MetafieldResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    delete:
      tags:
        - Catalog
      description: |
        Delete a `Metafield`
      operationId: deleteBrandMetafieldById
      responses:
        204:
          description: |
            An empty response.
  /catalog/brands/{brand_id}/image:
    parameters:
      - name: brand_id
        description: |
          The ID of the `Brand` to which the image is being attached.
        required: true
        in: path
        type: integer
    post:
      tags:
        - Catalog
      description: |
        Creates an image on a `Brand`. Publicly accessible URLs and files (form post) are valid parameters.
      operationId: createBrandImage
      parameters:
        - name: image_file
          description: |
            An image file. Supported MIME types include GIF, JPEG, and PNG.
          required: true
          in: formData
          type: file
      consumes:
        - multipart/form-data
      responses:
        200:
          description: |
            A ResourceImage and metadata.
          schema:
            $ref: '#/definitions/ImageResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Catalog
      description: |
        Deletes a `Brand` image from the BigCommerce Catalog.
      operationId: deleteBrandImage
      responses:
        204:
          description: Image cleared from the brand.
  /catalog/variants:
    get:
      tags:
        - Catalog
      description: |
        Returns a `Variant` object list from the BigCommerce Catalog.
      operationId: getVariants
      parameters:
        - $ref: "#/parameters/FilterIdParam"
        - $ref: "#/parameters/FilterSkuParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
      responses:
        200:
          description: |
            An array of variants and metadata.
          schema:
            $ref: '#/definitions/VariantCollectionResponse'
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
  /catalog/summary:
    get:
      tags:
        - Catalog
      description: |
        Returns a lightweight inventory summary from the BigCommerce Catalog.
      responses:
        200:
          description: |
            An array of catalog summary and metadata.
          schema:
            $ref: '#/definitions/CatalogSummaryResponse'
  /customers/subscribers:
    get:
      tags:
        - Customers
      description: |
        Returns a paginated Subscribers collection.
      operationId: getSubscribers
      parameters:
        - $ref: "#/parameters/FilterEmailParam"
        - $ref: "#/parameters/FilterFirstNameParam"
        - $ref: "#/parameters/FilterLastNameParam"
        - $ref: "#/parameters/FilterSourceParam"
        - $ref: "#/parameters/FilterOrderIdParam"
        - $ref: "#/parameters/FilterDateCreatedParam"
        - $ref: "#/parameters/FilterDateModifiedParam"
        - $ref: "#/parameters/PageParam"
        - $ref: "#/parameters/LimitParam"
      responses:
        200:
          description: |
            An array of `Subscriber` objects and metadata.
          schema:
            $ref: "#/definitions/SubscriberCollectionResponse"
    post:
      tags:
        - Customers
      description: |
        Creates a `Subscriber` object.
      operationId: createSubscriber
      parameters:
        - name: subscriber
          in: body
          required: true
          description: |
            `Subscriber` object
          schema:
            $ref: "#/definitions/Subscriber"
      responses:
        200:
          description: |
            A `Subscriber` object.
          schema:
            $ref: "#/definitions/SubscriberResponse"
        422:
          description: |
            The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Customers
      description: |
        Deletes a Subscriber or Subscribers from BigCommerce Customers.
      operationId: deleteSubscribers
      parameters:
        - $ref: "#/parameters/FilterEmailParam"
        - $ref: "#/parameters/FilterFirstNameParam"
        - $ref: "#/parameters/FilterLastNameParam"
        - $ref: "#/parameters/FilterSourceParam"
        - $ref: "#/parameters/FilterOrderIdParam"
        - $ref: "#/parameters/FilterDateCreatedParam"
        - $ref: "#/parameters/FilterDateModifiedParam"
      responses:
        204:
          description: |
            An empty response.
  /customers/subscribers/{subscriber_id}:
    parameters:
      - name: subscriber_id
        in: path
        description: |
          The ID of the `Subscriber` requested.
        required: true
        type: number
        format: int
    get:
      tags:
        - Customers
      description:
        Gets `Subscriber` object.
      operationId: getSubscriberById
      responses:
        200:
          description: |
            A `Subscriber` object.
          schema:
            $ref: "#/definitions/SubscriberResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
    put:
      tags:
        - Customers
      description: |
        Updates a `Subscriber` object.
      operationId: updateSubscriber
      parameters:
        - name: subscriber
          in: body
          required: true
          description: |
            Returns a `Subscriber` object.
          schema:
            $ref: "#/definitions/Subscriber"
      responses:
        200:
          description: |
            A `Subscriber` object.
          schema:
            $ref: "#/definitions/SubscriberResponse"
        404:
          description: |
            The resource was not found.
          schema:
            $ref: '#/definitions/NotFound'
        422:
          description: |
            The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: |
            The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Customers
      description: |
        Deletes a `Subscriber` object.
      operationId: deleteSubscriberById
      responses:
        204:
          description: |
            An empty response.
parameters:
  FilterIdParam:
    name: id
    description: |
      Filter items by id.
    required: false
    in: query
    type: integer
  FilterSkuParam:
    name: sku
    description: |
      Filter items by sku.
    required: false
    in: query
    type: string
  FilterNameParam:
    name: name
    description: |
      Filter items by name.
    required: false
    in: query
    type: string
  FilterEmailParam:
    name: email
    description: |
      Filter items by email.
    required: false
    in: query
    type: string
  FilterFirstNameParam:
    name: first_name
    description: |
      Filter items by first_name.
    required: false
    in: query
    type: string
  FilterLastNameParam:
    name: last_name
    description: |
      Filter items by last_name.
    required: false
    in: query
    type: string
  FilterSourceParam:
    name: source
    description: |
      Filter items by source.
    required: false
    in: query
    type: string
  FilterOrderIdParam:
    name: order_id
    description: |
      Filter items by order_id.
    required: false
    in: query
    type: integer
  FilterUpcParam:
    name: upc
    description: |
      Filter items by upc.
    required: false
    in: query
    type: string
  FilterPriceParam:
    name: price
    description: |
      Filter items by price.
    required: false
    in: query
    type: number
  FilterWeightParam:
    name: weight
    description: |
      Filter items by weight.
    required: false
    in: query
    type: number
  FilterConditionParam:
    name: condition
    description: |
      Filter items by condition.
    required: false
    in: query
    type: integer
  FilterBrandIdParam:
    name: brand_id
    description: |
      Filter items by brand_id.
    required: false
    in: query
    type: integer
  FilterDateModifiedParam:
    name: date_modified
    description: |
      Filter items by date_modified.
    required: false
    in: query
    type: string
    format: data-time
  FilterDateCreatedParam:
    name: date_created
    description: |
      Filter items by date_created.
    required: false
    in: query
    type: string
    format: data-time
  FilterDateLastImportedParam:
    name: date_last_imported
    description: |
      Filter items by date_last_imported.
    required: false
    in: query
    type: string
    format: data-time
  FilterIsVisibleParam:
    name: is_visible
    description: |
      Filter items by is_visible.
    required: false
    in: query
    type: integer
  FilterIsFeaturedParam:
    name: is_featured
    description: |
      Filter items by is_featured.
    required: false
    in: query
    type: integer
  FilterIsFreeShippingParam:
    name: is_free_shipping
    description: |
      Filter items by is_free_shipping.
    required: false
    in: query
    type: integer
  FilterInventoryLevelParam:
    name: inventory_level
    description: |
      Filter items by inventory_level.
    required: false
    in: query
    type: integer
  FilterInventoryLowParam:
    name: inventory_low
    description: |
      Filter items by inventory_low; values: 1, 0.
    required: false
    in: query
    type: integer
  FilterOutOfStockParam:
    name: out_of_stock
    description: |
      Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.
    required: false
    in: query
    type: integer
  FilterTotalSoldParam:
    name: total_sold
    description: |
      Filter items by total_sold.
    required: false
    in: query
    type: integer
  ProductFilterTypeParam:
    name: type
    description: |
      Filter items by type: `physical` or `digital`.
    required: false
    in: query
    type: string
  FilterCategoriesParam:
    name: categories
    description: |
      Filter items by categories.
    required: false
    in: query
    type: integer
  FilterKeywordParam:
    name: keyword
    description: |
      Filter items by keywords.
    required: false
    in: query
    type: string
  ProductFilterKeywordParam:
    name: keyword
    description: |
      Filter items by keywords found in the name, description, sku, keywords, or brand name.
    required: false
    in: query
    type: string
  ProductFilterKeywordContextParam:
    name: keyword_context
    description: |
      Set context for a product search.
    required: false
    in: query
    type: string
    enum:
      - shopper
      - merchant
  FilterIncludeParam:
    name: include
    description: |
      Include sub-resources on a product, with a comma-separated list. Valid expansions currently include `variants`, `images`, `custom_fields`, and `bulk_pricing_rules`.
    required: false
    in: query
    type: string
  FilterParentIdParam:
    name: parent_id
    description: |
      Filter items by parent_id.
    required: false
    in: query
    type: integer
  FilterPageTitleParam:
    name: page_title
    description: |
      Filter items by page_title.
    required: false
    in: query
    type: string
  FilterAvailabilityParam:
    name: availability
    description: |
      Filter items by availability. Values are: available, disabled, preorder.
    required: false
    in: query
    type: string
  PageParam:
    name: page
    description: |
      Control the page in a limited list of products.
    required: false
    in: query
    type: integer
  LimitParam:
    name: limit
    description: |
      Control the items per page.
    required: false
    in: query
    type: integer
  DirectionParam:
    name: direction
    description: |
      Sort direction. Values are: asc, desc.
    required: false
    in: query
    type: string
  ProductIdParam:
    name: product_id
    in: path
    description: |
      The ID of the `Product` to which the resource belongs.
    required: true
    type: number
    format: int
  VariantIdParam:
    name: variant_id
    in: path
    description: |
      The ID of the `Variant` to which the resource belongs.
    required: true
    type: number
    format: int
  CategoryIdParam:
    name: category_id
    in: path
    description: |
      The ID of the `Category` to which the resource belongs.
    required: true
    type: number
    format: int
  BrandIdParam:
    name: brand_id
    in: path
    description: |
      The ID of the `Brand` to which the resource belongs.
    required: true
    type: number
    format: int
  MetafieldIdParam:
    name: metafield_id
    in: path
    description: |
      The ID of the `Metafield`.
    required: true
    type: number
    format: int
  MetafieldKeyParam:
    name: key
    in: query
    description: |
      Filter based on a metafield's key.
    required: false
    type: string
  MetafieldNamespaceParam:
    name: namespace
    in: query
    description: |
      Filter based on a metafield's key.
    required: false
    type: string
definitions:
  ModifierCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Modifier"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ModifierResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Modifier"
      meta:
        $ref: "#/definitions/CollectionMeta"
  OptionCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Option"
      meta:
        $ref: "#/definitions/CollectionMeta"
  OptionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Option"
      meta:
        $ref: "#/definitions/CollectionMeta"
  CategoryTreeCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/CategoryNode"
      meta:
        $ref: "#/definitions/CollectionMeta"
  CategoryCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Category"
      meta:
        $ref: "#/definitions/CollectionMeta"
  CategoryResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Category"
      meta:
        $ref: "#/definitions/Meta"
  BrandCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Brand"
      meta:
        $ref: "#/definitions/CollectionMeta"
  BrandResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Brand"
      meta:
        $ref: "#/definitions/Meta"
  SubscriberCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Subscriber"
      meta:
        $ref: "#/definitions/CollectionMeta"
  SubscriberResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Subscriber"
      meta:
        $ref: "#/definitions/Meta"
  VariantResponse:
    description: |
      Successful response
    type: object
    properties:
      data:
        $ref: '#/definitions/Variant'
      meta:
        $ref: '#/definitions/Meta'
  ProductImageCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ProductImage"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ProductVideoCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ProductVideo"
      meta:
        $ref: "#/definitions/CollectionMeta"
  VariantCollectionResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Variant"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ProductImageResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/ProductImage"
      meta:
        $ref: "#/definitions/Meta"
  ProductVideoResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/ProductVideo"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ImageResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/ResourceImage"
      meta:
        $ref: "#/definitions/Meta"
  NotFound:
    description: |
      Error payload for the BigCommerce API.
    type: object
    properties:
      status:
        description: |
          404 HTTP status code.
        type: integer
      title:
        description: The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
  ProductResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Product"
      meta:
        $ref: "#/definitions/Meta"
  ProductCollectionResponse:
    type: object
    description: |
      Response payload for the Bigcommerce API.
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Product"
      meta:
        $ref: "#/definitions/CollectionMeta"
  CatalogSummaryResponse:
      description: |
        Response payload for the Bigcommerce API.
      type: object
      properties:
        data:
          $ref: "#/definitions/CatalogSummary"
        meta:
          $ref: "#/definitions/Meta"
  ErrorResponse:
    allOf:
    - $ref: "#/definitions/BaseError"
    - type: object
      properties:
        errors:
          $ref: "#/definitions/DetailedErrors"
  BaseError:
    type: object
    description: |
      Error payload for the BigCommerce API.
    properties:
      status:
        description: |
          The HTTP status code
        type: integer
      title:
        description: |
          The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
  DetailedErrors:
    type: object
    additionalProperties:
      type: string
  CollectionMeta:
    type: object
    description: |
      Data about the response, including pagination and collection totals.
    properties:
      total:
        type: integer
        description: |
          Total number of items return in the result set.
      count:
        type: integer
        description: |
          Total number of items in the collection.
      per_page:
        type: integer
        description: |
          The amount of items returned in the collection per page, controlled by the limit parameter.
      current_page:
        type: integer
        description: |
          The page you are currently on within the collection.
      total_pages:
        type: integer
        description: |
          The total number of pages in the collection.
      links:
        type: object
        description: |
          Pagination links for the previous and next parts of the whole collection.
        properties:
          previous:
            type: string
            description: |
              Link to the previous page returned in the response.
          current:
            type: string
            description: |
              Link to the current page returned in the response.
          next:
            type: string
            description: |
              Link to the next page returned in the response.
  Meta:
    type: object
    description: Empty meta object; might be used later.
  Product:
    type: object
    description: |
      A BigCommerce Product object describes a single purchasable unit or a collection of purchasable units.
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the product; increments sequentially.
      name:
        type: string
        description: |
          The product name.
      type:
        type: string
        description: |
          The product type: physical - a physical stock unit; digital - a digital download.
        enum:
          - physical
          - digital
      sku:
        type: string
        description: |
          User-defined product code/stock keeping unit (SKU).
      description:
        type: string
        description: |
          The product description, which can include HTML formatting.
      weight:
        type: number
        format: double
        description: |
          Weight of the product, which can be used when calculating shipping costs.
      width:
        type: number
        format: double
        description: |
          Width of the product, which can be used when calculating shipping costs.
      depth:
        type: number
        format: double
        description: |
          Depth of the product, which can be used when calculating shipping costs.
      height:
        type: number
        format: double
        description: |
          Height of the product, which can be used when calculating shipping costs.
      price:
        type: number
        format: double
        description: |
          The price of the product. The price should include or exclude tax, based on the store settings.
      cost_price:
        type: number
        format: double
        description: |
          The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
      retail_price:
        type: number
        format: double
        description: |
          The retail cost of the product. If entered, the retail cost price will be shown on the product page.
      sale_price:
        type: number
        format: double
        description: |
          If entered, the sale price will be used instead of value in the price field when calculating the product's cost.
      tax_class_id:
        type: integer
        description: |
          The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
      product_tax_code:
        type: string
        description: |
          Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to Avalara Premium can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.
      calculated_price:
        type: number
        format: double
        description: |
          The price of the product, unless a `sale_price` is set.
      categories:
        type: array
        description: |
          An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.
        items:
          type: integer
      brand_id:
        type: integer
        description: |
          The ID associated with the product's brand.
      inventory_level:
        type: integer
        description: |
          Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.
      inventory_warning_level:
        type: integer
        description: |
          Inventory Warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
      inventory_tracking:
        type: string
        description: |
          The type of inventory tracking for the product. Values are: none - inventory levels will not be tracked; product - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; variant - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
        enum:
          - none
          - product
          - variant
      fixed_cost_shipping_price:
        type: integer
        description: |
          A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
      is_free_shipping:
        type: boolean
        description: |
          Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
      is_visible:
        type: boolean
        description: |
          Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
      is_featured:
        type: boolean
        description: |
          Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
      warranty:
        type: string
        description: |
          Warranty information displayed on the product page. Can include HTML formatting.
      bin_picking_number:
        type: string
        description: |
          The BIN picking number for the product.
      layout_file:
        type: string
        description: |
          The layout template file used to render this product.
      upc:
        type: string
        description: |
          The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
      search_keywords:
        type: string
        description: |
          A comma-separated list of keywords that can be used to locate the product when searching the store.
      availability:
        type: string
        enum:
          - available
          - disabled
          - preorder
        description: |
          Availability of the product. Availability options are: available - the product can be purchased in the storefront; disabled - the product is listed in the storefront, but cannot be purchased; preorder - the product is listed for pre-orders.
      availability_description:
        type: string
        description: |
          Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as 'Usually ships in 24 hours.'
      gift_wrapping_options_type:
        type: string
        enum:
          - any
          - none
          - list
        description: |
          Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
      gift_wrapping_options_list:
        type: array
        description: |
          A list of gift-wrapping option IDs.
        items:
          type: integer
      sort_order:
        type: integer
        description: |
          Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
      condition:
        type: string
        description: |
          The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`.
      is_condition_shown:
        type: boolean
        description: |
          Flag used to determine whether the product condition is shown to the customer on the product page.
      order_quantity_minimum:
        type: integer
        description: |
          The minimum quantity an order must contain, to be eligible to purchase this product.
      order_quantity_maximum:
        type: integer
        description: |
          The maximum quantity an order can contain when purchasing the product.
      page_title:
        type: string
        description: |
          Custom title for the product page. If not defined, the product name will be used as the meta title.
      meta_keywords:
        type: array
        description: |
          Custom meta keywords for the product page. If not defined, the store's default keywords will be used.
        items:
          type: string
      meta_description:
        type: string
        description: |
          Custom meta description for the product page. If not defined, the store's default meta description will be used.
      date_created:
        type: string
        format: data-time
        description: |
          The date on which the product was created.
      date_modified:
        type: string
        format: data-time
        description: |
          The date on which the product was modified.
      view_count:
        type: integer
        description: |
          The number of times the product has been viewed.
      preorder_release_date:
        type: string
        format: data-time
        description: |
          Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.
      preorder_message:
        type: string
        description: |
          Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
      is_preorder_only:
        type: boolean
        description: |
          If set to `false`, the product will not change its availability from 	`preorder` to `available` on the release date. Otherwise, on the release date the product's availability/status will change to `available`.
      is_price_hidden:
        type: boolean
        description: |
          False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
      price_hidden_label:
        type: string
        description: |
          By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
      images:
        type: array
        items:
          $ref: "#/definitions/ProductImage"
      videos:
        type: array
        items:
          $ref: "#/definitions/ProductVideo"
      custom_fields:
        type: array
        items:
          $ref: "#/definitions/CustomField"
      custom_url:
        $ref: "#/definitions/CustomUrl"
      bulk_pricing_rules:
        type: array
        items:
          $ref: "#/definitions/BulkPricingRule"
      variants:
        type: array
        items:
          $ref: "#/definitions/Variant"
  ProductPost:
    allOf:
      - $ref: "#/definitions/Product"
      - properties:
          variants:
            type: array
            items:
              $ref: "#/definitions/VariantPost"
  ProductPut:
    allOf:
      - $ref: "#/definitions/Product"
      - properties:
          variants:
            type: array
            items:
              $ref: "#/definitions/Variant"
  ProductImageBase:
    type: object
    description: |
      Common ProductImage properties.
    properties:
      is_thumbnail:
        description: |
          Flag for identifying whether the image is used as the product's thumbnail.
        type: boolean
      sort_order:
        description: |
          The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.
        type: integer
      description:
        description: |
          The description for the image.
        type: string
  ProductImage:
    type: object
    description: |
      The full ProductImage model.
    allOf:
      - $ref: "#/definitions/ProductImageBase"
      - properties:
          id:
            description: |
              The unique numeric ID of the image; increments sequentially.
            type: integer
          product_id:
            description: |
              The unique numeric identifier for the product with which the image is associated.
            type: integer
          image_file:
            description: |
              The local path to the original image file uploaded to BigCommerce.
            type: string
          url_zoom:
            description: |
              The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled.
            type: string
          url_standard:
            description: |
              The standard URL for this image. By default, this is used for product-page images.
            type: string
          url_thumbnail:
            description: |
              The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
            type: string
          url_tiny:
            description: |
              The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
            type: string
  ProductImagePost:
    type: object
    description: |
      The model for a POST to create an image on a product.
    allOf:
      - $ref: "#/definitions/ProductImageBase"
      - properties:
          image_url:
            description: |
              Must be a fully qualified URL path, including protocol.
            type: string
          image_file:
            description: |
              Must be sent as a multipart/form-data field in the request body.
            type: string
  ProductImagePut:
    type: object
    description: |
      The model for a PUT to update applicable ProductImage fields.
    allOf:
      - $ref: "#/definitions/ProductImageBase"
  ProductVideo:
    type: object
    description: |
      A product video model.
    properties:
      id:
        description: |
          The ID of a YouTube video.
        type: integer
      product_id:
        description: |
          The unique numeric identifier for the product with which the image is associated.
        type: integer
      sort_order:
        description: |
          The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.
        type: integer
      description:
        description: |
          The description for the video. If left blank, this will be filled in according to data on YouTube.
        type: string
      title:
        description: |
          The title for the video. If left blank, this will be filled in according to data on YouTube.
        type: string
      length:
        description: |
          Length of the video. This will be filled in according to data on YouTube.
        type: string
  CustomField:
    type: object
    description: |
      Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date.
    properties:
      id:
        description: |
          The unique numeric ID of the custom field; increments sequentially.
        type: integer
      name:
        description: |
          The name of the field, shown on the storefront, orders, etc.
        type: string
      value:
        description: |
          The values or text of the field, shown on the storefront, orders, etc.
        type: string
      product_id:
        description: |
          The unique numeric identifier for the product with which the field is associated.
        type: integer
  CustomUrl:
    type: object
    description: |
      The custom URL for the product on the storefront.
    properties:
      url:
        type: string
        description: |
          Product URL on the storefront.
      is_customized:
        type: boolean
        description: |
          Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
  BulkPricingRule:
    type: object
    description: |
      Rules that offer price discounts based on quantity breaks.
    properties:
      id:
        type: integer
        description: |
          The ID of the bulk pricing rule.
      quantity_min:
        type: integer
        description: |
          The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
      quantity_max:
        type: integer
        description: |
          The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
      type:
        type: string
        enum:
          - price
          - percent
          - fixed
        description: |
          The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
      amount:
        type: number
        format: double
        description: |
          The value of the adjustment by the bulk pricing rule.
  Variant:
    type: object
    properties:
      id:
        type: integer
      product_id:
        type: integer
      sku:
        type: string
      sku_id:
        type: integer
        x-nullable: true
        description: Read-only reference to v2 API's SKU ID. Null if it is a base variant.
      cost_price:
        type: number
        format: double
        description: The cost price of the variant.
      price:
        type: number
        format: double
        x-nullable: true
        description: This variant's base price on the storefront. If this value is null, the product's default price (set in the Product resource's `price` field) will be used as the base price.
      weight:
        type: number
        format: double
        x-nullable: true
        description: This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's `weight` field) will be used as the base weight.
      purchasing_disabled:
        type: boolean
        description: If `true`, this variant will not be purchasable on the storefront.
      purchasing_disabled_message:
        type: string
        description: If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
      image_url:
        type: string
        description: The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images (not specific to the variant) should be stored on the product.
      upc:
        type: string
        description: The UPC code used in feeds for shopping comparison sites and external channel integrations.
      inventory_level:
        type: integer
        description: Inventory level for the variant, which is used when the product's `inventory_tracking` is set to `variant`.
      inventory_warning_level:
        type: integer
        description: When the variant hits this inventory level, it is considered low stock.
      bin_picking_number:
        type: string
        description: Identifies where in a warehouse the variant is located.
      option_values:
        type: array
        items:
          $ref: '#/definitions/OptionValueShort'
        description: Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant.
  VariantPost:
    type: object
    properties:
      id:
        type: integer
      product_id:
        type: integer
      sku:
        type: string
      sku_id:
        type: integer
        x-nullable: true
        description: Read-only reference to v2 API's SKU ID. Null if it is a base variant.
      price:
        type: string
        x-nullable: true
        description: This variant's base price on the storefront. If this value is null, the product's default price (set in the Product resource's `price` field) will be used as the base price.
      weight:
        type: string
        x-nullable: true
        description: This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's `weight` field) will be used as the base weight.
      purchasing_disabled:
        type: boolean
        description: If `true`, this variant will not be purchasable on the storefront.
      purchasing_disabled_message:
        type: string
        description: If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
      image_url:
        type: string
        description: The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images (not specific to the variant) should be stored on the product.
      cost_price:
        type: string
        description: The variant's cost price.
      upc:
        type: string
        description: The UPC code used in feeds for shopping comparison sites and external channel integrations.
      inventory_level:
        type: integer
        description: Inventory level for the variant, which is used when the product's `inventory_tracking` is set to `variant`.
      inventory_warning_level:
        type: integer
        description: When the variant hits this inventory level, it is considered low stock.
      bin_picking_number:
        type: string
        description: Identifies where in a warehouse the variant is located.
      option_values:
        type: array
        items:
          $ref: '#/definitions/OptionValueShortPost'
  OptionValueShortPost:
    type: object
    properties:
      option_display_name:
        type: string
        description: |
          The name of the option to be created on POST.
      label:
        type: string
        description: |
          The label of the option value to be created on POST.
  OptionValueShort:
    type: object
    properties:
      id:
        type: integer
      option_id:
        type: integer
      option_display_name:
        type: string
        description: |
          The name of the option.
      label:
        type: string
        description: |
          The label of the option value.
  CategoryNode:
    type: object
    description: |
      A BigCommerce category node object. Used to reflect parent <> child category relationships.
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the category; increments sequentially.
      parent_id:
        type: integer
        description: |
          The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
      name:
        type: string
        description: |
          The name displayed for the category. Name is unique with respect to the category's siblings.
      is_visible:
        type: boolean
        description: |
          Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
      url:
        type: string
        description: |
          The custom URL for the category on the storefront.
      children:
        type: array
        description: |
          The list of children of the category.
        items:
          $ref: "#/definitions/CategoryNode"
  Category:
    type: object
    description: |
      A BigCommerce category object.
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the category; increments sequentially.
      parent_id:
        type: integer
        description: |
          The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
      name:
        type: string
        description: |
          The name displayed for the category. Name is unique with respect to the category's siblings.
      description:
        type: string
        description: |
          The product description, which can include HTML formatting.
      views:
        type: integer
        description: |
          Number of views the category has on the storefront.
      sort_order:
        type: integer
        description: |
          Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
      page_title:
        type: string
        description: |
          Custom title for the category page. If not defined, the category name will be used as the meta title.
      meta_keywords:
        type: array
        description: |
          Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"].
        items:
          type: string
      meta_description:
        type: string
        description: |
          Custom meta description for the category page. If not defined, the store's default meta description will be used.
      layout_file:
        type: string
        description: |
          The layout template file used to render this category.
      image_url:
        type: string
        description: |
          Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
      is_visible:
        type: boolean
        description: |
          Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
      search_keywords:
        type: string
        description: |
          A comma-separated list of keywords that can be used to locate the category when searching the store.
      default_product_sort:
        type: string
        description: |
          Determines how the products are sorted on category page load.
        enum:
          - use_store_settings
          - featured
          - newest
          - best_selling
          - alpha_asc
          - alpha_desc
          - avg_customer_review
          - price_asc
          - price_desc
      custom_url:
        $ref: "#/definitions/CustomUrl"
  ResourceImage:
    type: object
    description: |
      An object containing a publicly accessible image URL, or a form post that contains an image file.
    properties:
      image_url:
        type: string
        description: |
          A public URL for a GIF, JPEG, or PNG image.
  Brand:
    type: object
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the brand; increments sequentially.
      name:
        type: string
        description: |
          The name of the brand. Must be unique.
      page_title:
        type: string
        description: |
          The title shown in the browser while viewing the brand.
      meta_keywords:
        type: array
        items:
          type: string
        description: |
          Comma-separated list of meta keywords to include in the HTML.
      meta_description:
        type: string
        description: |
          A meta description to include.
      search_keywords:
        type: string
        description: |
          A comma-separated list of keywords that can be used to locate this brand.
      image_url:
        type: string
        description: |
          Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
  Option:
    type: object
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the option; increments sequentially.
      product_id:
        type: integer
        description: |
          The unique numeric ID of the product to which the option belongs.
      name:
        type: string
        description: |
          The unique option name, auto-generated from the display name, a timestamp, and the product ID.
      display_name:
        type: string
        description: |
          The name of the option shown on the storefront.
      type:
        type: string
        description: |
          The type of option, which determines how it will display on the storefront. For reference, the former v2 API values are:
          RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
        enum:
          - radio_buttons
          - rectangles
          - dropdown
          - product_list
          - product_list_with_images
          - swatch
      config:
        $ref: "#/definitions/OptionConfig"
      option_values:
        type: array
        items:
          $ref: "#/definitions/OptionValue"
  Subscriber:
    type: object
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the subscriber; increments sequentially.
      email:
        type: string
        description: |
          The email of the subscriber. Must be unique.
      first_name:
        type: string
        description: |
          The first name of the subscriber.
      last_name:
        type: string
        description: |
          The last name of the subscriber.
      source:
        type: string
        description: |
          The source of the subscriber. Values are: `storefront`, `order`, or `custom`.
      order_id:
        type: integer
        description: |
          The ID of the source order, if source was an order.
      date_modified:
        type: string
        format: data-time
        description: |
          The date on which the subscriber was modified.
      date_created:
        type: string
        format: data-time
        description: |
          The date on which the subscriber was created.
  OptionConfig:
    type: object
    properties:
      default_value:
        type: string
        description: |
          (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
      checked_by_default:
        type: boolean
        description: |
          (checkbox) Flag for setting the checkbox to be checked by default.
      checkbox_label:
        type: string
        description: |
          (checkbox) Label displayed for the checkbox option.
      date_limited:
        type: boolean
        description: |
          (date) Flag to limit the dates allowed to be entered on a date option.
      date_limit_mode:
        type: string
        description: |
          (date) The type of limit that is allowed to be entered on a date option.
        enum:
          - earliest
          - range
          - latest
      date_earliest_value:
        type: string
        format: date
        description: |
          (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
      date_latest_value:
        type: string
        format: date
        description: |
          (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
      file_types_mode:
        type: string
        description: |
          (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
        enum:
          - specific
          - all
      file_types_supported:
        type: array
        description: |
          (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
            `images` - Allows upload of image MIME types (`bmp`,`gif`,`jpg`,`jpeg`,`jpe`,`jif`,`jfif`,`jfi`,`png`,`wbmp`,`xbm`,`tiff`).
            `documents` - Allows upload of document MIME types (`txt`,`pdf`,`rtf`,`doc`,`docx`,`xls`,`xlsx`,`accdb`,`mdb`,`one`,`pps`,`ppsx`,`ppt`,`pptx`,`pub`,`odt`,`ods`,`odp`,`odg`,`odf`).
            `other` - Allows file types defined in the `file_types_other` array.
        items:
          type: string
      file_types_other:
        type: array
        description: |
          (file) A list of other file types allowed with the file upload option.
        items:
          type: string
      file_max_size:
        type: integer
        description: |
         (file) The maximum size for a file that can be used with the file upload option.
      text_characters_limited:
        type: boolean
        description: |
          (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
      text_min_length:
        type: integer
        description: |
          (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
      text_max_length:
        type: integer
        description: |
          (text, multi_line_text) The maximum length allowed for a text or multi line text option.
      text_lines_limited:
        type: boolean
        description: |
          (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
      text_max_lines:
        type: integer
        description: |
          (multi_line_text) The maximum number of lines allowed on a multi-line text input.
      number_limited:
        type: boolean
        description: |
          (numbers_only_text) Flag to limit the value of a number option.
      number_limit_mode:
        type: string
        description: |
          (numbers_only_text) The type of limit on values entered for a number option.
        enum:
          - lowest
          - highest
          - range
      number_lowest_value:
        type: number
        description: |
          (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
      number_highest_value:
        type: number
        description: |
          (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
      number_integers_only:
        type: boolean
        description: |
          (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
      product_list_adjusts_inventory:
        type: boolean
        description: |
          (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
      product_list_adjusts_pricing:
        type: boolean
        description: |
          (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
      product_list_shipping_calc:
        type: string
        description: |
          (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
        enum:
          - none
          - weight
          - package
  Modifier:
    type: object
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the modifier; increments sequentially.
      product_id:
        type: integer
        description: |
          The unique numeric ID of the product to which the option belongs.
      name:
        type: string
        description: |
          The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
      display_name:
        type: string
        description: |
          The name of the option shown on the storefront.
      type:
        type: string
        description: |
          The type of modifier, which determines how it will display on the storefront. For reference, the former v2 API values are:
          D = date, C = checkbox, F = file, T = text, MT = multi_line_text, N = numbers_only_text, RB = radio_buttons,
          RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
        enum:
          - date
          - checkbox
          - file
          - text
          - multi_line_text
          - numbers_only_text
          - radio_buttons
          - rectangles
          - dropdown
          - product_list
          - product_list_with_images
          - swatch
      required:
        type: boolean
        description: |
          Whether or not this modifer is required at checkout.
      config:
        $ref: "#/definitions/OptionConfig"
      option_values:
        type: array
        items:
          $ref: "#/definitions/ModifierValue"
  OptionValue:
    type: object
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the value; increments sequentially.
      is_default:
        type: boolean
        description: |
          The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
      label:
        type: string
        description: |
          The text display identifying the value on the storefront.
      sort_order:
        type: integer
        description: |
          The order in which the value will be displayed on the product page.
      value_data:
        type: object
        description: |
          Extra data describing the value, based on the type of option or modifier with which the value is associated. `swatch` requires an array of colors, with up to three hexidecimal color keys; `product list` requires a `product_id`; and `checkbox` requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
  ModifierValue:
    type: object
    allOf:
      - $ref: '#/definitions/OptionValue'
      - type: object
        properties:
          adjusters:
            type: object
            properties:
              price:
                $ref: '#/definitions/Adjuster'
              weight:
                $ref: '#/definitions/Adjuster'
              image_url:
                type: string
                description: |
                  The URL for an image displayed on the storefront when the modifier value is selected.
              purchasing_disabled:
                type: object
                properties:
                  status:
                    type: boolean
                    description: |
                      Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                  message:
                    type: string
                    description: |
                      The message displayed on the storefront when the purchasing disabled status is `true`.
  Adjuster:
    type: object
    properties:
      adjuster:
        type: string
        description: |
          The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
        enum:
          - relative
          - percentage
      adjuster_value:
        type: number
        description: |
          The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
  CatalogSummary:
      type: object
      description: |
        A BigCommerce Catalog Summary object describes a lightweight summary of the catalog.
      properties:
        inventory_count:
          type: integer
          description: |
            A count of all inventory items in the catalog.
        inventory_value:
          type: number
          format: double
          description: |
            Total value of store's inventory.
        primary_category_id:
          type: integer
          description: |
            ID of the category containing the most products.
        primary_category_name:
          type: string
          description: |
            Name of the category containing the most products.
  ComplexRuleCollectionResponse:
    type: object
    description: |
      Response payload for the Bigcommerce API.
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ComplexRule"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ComplexRuleResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/ComplexRule"
      meta:
        $ref: "#/definitions/CollectionMeta"
  ComplexRule:
    type: object
    description: |
      Apply price, weight, image, or availabilty adjustments to product, based on a set of conditions. A complex rule's condition must either contain more than one modifier value, or else contain a modifier value and a variant id.
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the rule; increments sequentially.
      product_id:
        type: integer
        description: |
          The unique numeric ID of the product with which the rule is associated; increments sequentially.
      sort_order:
        type: integer
        description: |
          Priority this rule will be given, when making adjustments to the product properties.
      enabled:
        type: boolean
        description: |
          Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
      stop:
        type: boolean
        description: |
          Flag for determining whether other rules should not be applied after this rule has been applied.
      price_adjuster:
        $ref: "#/definitions/Adjuster"
      weight_adjuster:
        $ref: "#/definitions/Adjuster"
      purchasing_disabled:
        type: boolean
        description: |
          Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
      purchasing_disabled_message:
        type: string
        description: |
          Message displayed on the storefront when a rule disables the purchasing of a product.
      purchasing_hidden:
        type: boolean
        description: |
          Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
      image_url:
        type: string
        description: |
          The URL for an image displayed on the storefront when the conditions are applied.
      conditions:
        type: array
        items:
          $ref: "#/definitions/ComplexRuleCondition"
  ComplexRuleCondition:
    type: object
    description: |
      Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`'s, or else reference a `modifier_value_id` and a `variant_id`.
    properties:
      id:
        type: integer
        description: |
          The unique numeric ID of the rule condition; increments sequentially.
      rule_id:
        type: integer
        description: |
          The unique numeric ID of the rule with which the condition is associated.
      modifier_id:
        type: integer
        description: |
          The unique numeric ID of the modifier with which the rule condition is associated.
      modifier_value_id:
        type: integer
        description: |
          The unique numeric ID of the modifier value with which the rule condition is associated.
      variant_id:
        type: integer
        description: |
          The unique numeric ID of the variant the rule condition is associated with.
      combination_id:
        type: integer
        description: |
          (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
  MetaFieldCollectionResponse:
    type: object
    description: |
      Response payload for the Bigcommerce API.
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Metafield"
      meta:
        $ref: "#/definitions/CollectionMeta"
  MetafieldResponse:
    description: |
      Response payload for the Bigcommerce API.
    type: object
    properties:
      data:
        $ref: "#/definitions/Metafield"
      meta:
        $ref: "#/definitions/Meta"
  Metafield:
    type: object
    description: |
      Allows app partners to write custom data to various resources in the API.
    properties:
      id:
        type: integer
        description: |
          The unique identifier for the metafields.
      description:
        type: string
        description: |
          Description for the metafields.
      permission_set:
        type: string
        enum:
          - app_only
          - read
          - write
        description: |
          Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`).
      namespace:
        type: string
        description: |
          Namespace for the metafield, for organizational purposes.
      resource_type:
        type: string
        enum:
          - category
          - brand
          - product
          - variant
        description: |
          The type of resource with which the metafield is associated.
      resource_id:
        type: integer
        description: |
          The unique identifier for the resource with which the metafield is associated.
      key:
        type: string
        description: |
          The name of the field, for example: `location_id`, `color`.
      value:
        type: string
        description: |
          The value of the field, for example: `1`, `blue`
      created_at:
        type: string
        format: date-time
        description: |
          Date and time of the metafield's creation.
      updated_at:
        type: string
        format: date-time
        description: |
          Date and time when the metafield was last updated.
